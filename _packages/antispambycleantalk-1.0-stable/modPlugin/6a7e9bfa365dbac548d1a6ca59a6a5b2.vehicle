<?php return array (
  'unique_key' => 'name',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'PluginEvents' => 
    array (
      '65a4a5b3365939eb5956e91c09cbdd91' => 
      array (
        'preserve_keys' => true,
        'update_object' => true,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnLoadWebDocument","priority":0,"propertyset":0}',
        'guid' => '08a41c7cfce982697f3ac7db721c3804',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnLoadWebDocument',
        ),
        'signature' => '5022d5fc4d7455640472f29690da02b0',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => true,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'antispambycleantalk',
  'resolve' => NULL,
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'f881e64994a49697727cde7c71f3faed',
  'package' => 'modx',
  'class' => 'modPlugin',
  'signature' => '6a7e9bfa365dbac548d1a6ca59a6a5b2',
  'native_key' => 1,
  'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"cleantalkCheck","description":"Calls the Cleantalk API to check content for spam. Requires Cleantalk API key.","editor_type":0,"category":0,"cache_type":0,"plugincode":"$e = $modx->Event;\\r\\nif ($e->name == \'OnLoadWebDocument\')\\r\\n{\\r\\n\\t$plugin_enabled = $modx->getOption(\'antispambycleantalk.plugin_enabled\');\\r\\n\\tif ($plugin_enabled)\\r\\n\\t{\\r\\n\\t\\t$ct_temp_msg_data = getFieldsAny($_POST);\\r\\n\\t\\tif (isset($ct_temp_msg_data[\'email\']) && (isset($ct_temp_msg_data[\'nickname\']) || isset($ct_temp_msg_data[\'message\'])))\\r\\n\\t\\t{\\r\\n\\t\\t\\t$api_key = $modx->getOption(\'antispambycleantalk.api_key\');\\r\\n\\t\\t\\t$sender_email    = ($ct_temp_msg_data[\'email\']    ? $ct_temp_msg_data[\'email\']    : \'\');\\r\\n\\t\\t\\t$sender_nickname = ($ct_temp_msg_data[\'nickname\'] ? $ct_temp_msg_data[\'nickname\'] : \'\');\\r\\n\\t\\t\\t$sender_message_post  = ($ct_temp_msg_data[\'message\']  ? $ct_temp_msg_data[\'message\']  : array());\\r\\n\\t\\t\\t$sender_message == null;\\r\\n\\t\\t\\tforeach ($sender_message_post as $key=>$value)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tif ($key == \'message\'   ||\\r\\n\\t\\t\\t\\t\\t$key == \'contact\'   ||\\r\\n\\t\\t\\t\\t\\t$key == \'msg\'       ||\\r\\n\\t\\t\\t\\t\\t$key == \'contactus\' ||\\r\\n\\t\\t\\t\\t\\t$key == \'contact_us\'\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t\\t$sender_message = $value;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t$check_type = null;\\r\\n\\t\\t\\tif ($sender_message !== null)\\r\\n\\t\\t\\t    $check_type = \'check_message\';\\r\\n\\t\\t\\telse $check_type = \'check_newuser\';\\r\\n\\t\\t\\t$path = $modx->getOption(\'antispambycleantalk.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/antispambycleantalk\\/model\\/\');\\r\\n\\t\\t\\tif (is_readable($path . \'cleantalk.class.php\') && is_readable($path . \'cleantalkhelper.class.php\') && is_readable($path . \'cleantalkrequest.class.php\') && is_readable($path . \'cleantalkresponse.class.php\')) {\\r\\n\\t\\t\\t    $cleantalk = $modx->getService(\'antispambycleantalk\',\'Cleantalk\', $path);\\r\\n\\t\\t\\t    $cleantalk_request = $modx->getService(\'antispambycleantalk\',\'CleantalkRequest\', $path);\\r\\n\\t\\t\\t    $cleantalk_response = $modx->getService(\'antispambycleantalk\',\'CleantalkResponse\',$path);\\r\\n\\t\\t\\t    $cleantalk_helper = $modx->getService(\'antispambycleantalk\',\'CleantalkHelper\',$path);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t\\/* Content check *\\/\\r\\n\\t\\t\\t$refferrer = null;\\r\\n\\t\\t\\tif (isset($_SERVER[\'HTTP_REFERER\'])) {\\r\\n\\t\\t\\t    $refferrer = htmlspecialchars((string) $_SERVER[\'HTTP_REFERER\']);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t$user_agent = null;\\r\\n\\t\\t\\tif (isset($_SERVER[\'HTTP_USER_AGENT\'])) {\\r\\n\\t\\t\\t    $user_agent = htmlspecialchars((string) $_SERVER[\'HTTP_USER_AGENT\']);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t$sender_info = array(\\r\\n\\t\\t\\t    \'REFFERRER\' => $refferrer,\\r\\n\\t\\t\\t    \'post_url\' => $refferrer,\\r\\n\\t\\t\\t    \'USER_AGENT\' => $user_agent\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t$js_on = 0;\\r\\n\\t\\t\\tif (isset($_POST[\'ct_checkjs\']) && $_POST[\'ct_checkjs\'] == date(\\"Y\\"))\\r\\n\\t\\t\\t        $js_on = 1;\\r\\n\\t\\t\\t$cookie_timestamp = (isset($_COOKIE[\'ct_timestamp\']) ? $_COOKIE[\'ct_timestamp\'] : 0);\\r\\n\\t\\t\\t$sender_info = json_encode($sender_info);   \\r\\n\\t\\t\\t$cleantalk_request->auth_key = trim($api_key);\\r\\n\\t\\t\\t$cleantalk_request->sender_email = $sender_email;\\r\\n\\t\\t\\t$cleantalk_request->sender_nickname = $sender_nickname;\\r\\n\\t\\t\\t$cleantalk_request->sender_ip = $cleantalk->cleantalk_get_real_ip();\\r\\n\\t\\t\\t$cleantalk_request->agent = \'modx-10\';\\r\\n\\t\\t\\t$cleantalk_request->js_on = $js_on;\\r\\n\\t\\t\\t$cleantalk_request->submit_time = time() - $cookie_timestamp;\\r\\n\\t\\t\\t$cleantalk_request->sender_info = $sender_info;\\r\\n\\t\\t\\t$cleantalk->work_url = \'http:\\/\\/moderate.cleantalk.org\';\\r\\n\\t\\t\\t$cleantalk->server_url = \'http:\\/\\/moderate.cleantalk.org\';\\r\\n\\t\\t\\tif ($check_type == \'check_message\'){\\r\\n\\t\\t\\t    $cleantalk_request->message = $sender_message;\\r\\n\\t\\t\\t    $ct_result = $cleantalk->isAllowMessage($cleantalk_request);   \\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse $ct_result = $cleantalk->isAllowUser($cleantalk_request); \\r\\n\\t\\t\\tif($ct_result->errno == 0 && $ct_result->allow == 0)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t  \\t$error_tpl=file_get_contents($path.\\"\\/error.html\\");\\r\\n\\t\\t\\t\\tprint str_replace(\'%ERROR_TEXT%\',$ct_result->comment,$error_tpl);\\t\\t\\t   \\t\\r\\n\\t\\t\\t\\tdie();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\/*\\r\\n* Get data from submit recursively\\r\\n*\\/\\r\\n\\r\\nfunction getFieldsAny($arr, $message=array(), $email = null, $nickname = array(\'nick\' => \'\', \'first\' => \'\', \'last\' => \'\'), $subject = null, $contact = true, $prev_name = \'\'){\\r\\n\\t\\r\\n\\t$obfuscate_params = array( \\/\\/Fields to replace with ****\\r\\n\\t\\t\'password\',\\r\\n\\t\\t\'pass\',\\r\\n\\t\\t\'pwd\',\\r\\n\\t\\t\'pswd\'\\r\\n\\t);\\r\\n\\t\\r\\n\\t$skip_fields_with_strings = array( \\/\\/Array for strings in keys to skip and known service fields\\r\\n\\t\\t\\/\\/ Common\\r\\n\\t\\t\'ct_checkjs\', \\/\\/Do not send ct_checkjs\\r\\n\\t\\t\'nonce\', \\/\\/nonce for strings such as \'rsvp_nonce_name\'\\r\\n\\t\\t\'security\',\\r\\n\\t\\t\'action\',\\r\\n\\t\\t\'http_referer\',\\r\\n\\t\\t\'timestamp\',\\r\\n\\t\\t\'captcha\',\\r\\n\\t\\t\\/\\/ Formidable Form\\r\\n\\t\\t\'form_key\',\\r\\n\\t\\t\'submit_entry\',\\r\\n\\t\\t\\/\\/ Custom Contact Forms\\r\\n\\t\\t\'form_id\',\\r\\n\\t\\t\'ccf_form\',\\r\\n\\t\\t\'form_page\',\\r\\n\\t\\t\\/\\/ Qu Forms\\r\\n\\t\\t\'iphorm_uid\',\\r\\n\\t\\t\'form_url\',\\r\\n\\t\\t\'post_id\',\\r\\n\\t\\t\'iphorm_ajax\',\\r\\n\\t\\t\'iphorm_id\',\\r\\n\\t\\t\\/\\/ Fast SecureContact Froms\\r\\n\\t\\t\'fs_postonce_1\',\\r\\n\\t\\t\'fscf_submitted\',\\r\\n\\t\\t\'mailto_id\',\\r\\n\\t\\t\'si_contact_action\',\\r\\n\\t\\t\\/\\/ Ninja Forms\\r\\n\\t\\t\'formData_id\',\\r\\n\\t\\t\'formData_settings\',\\r\\n\\t\\t\'formData_fields_\\\\d+_id\',\\r\\n\\t\\t\\/\\/ E_signature\\r\\n\\t\\t\'recipient_signature\',\\r\\n\\t\\t\'output_\\\\d+_\\\\w{0,2}\',\\r\\n\\t\\t\\/\\/ Contact Form by Web-Settler protection\\r\\n        \'_formId\',\\r\\n        \'_returnLink\',\\r\\n\\t\\t\\/\\/ Social login and more\\r\\n\\t\\t\'_save\',\\r\\n\\t\\t\'_facebook\',\\r\\n\\t\\t\'_social\',\\r\\n\\t\\t\'user_login-\',\\r\\n\\t);\\r\\n\\tif(count($arr)){\\r\\n\\t\\tforeach($arr as $key => $value){\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif(gettype($value)==\'string\'){\\r\\n\\t\\t\\t\\t$decoded_json_value = json_decode($value, true);\\r\\n\\t\\t\\t\\tif($decoded_json_value !== null)\\r\\n\\t\\t\\t\\t\\t$value = $decoded_json_value;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif(!is_array($value) && !is_object($value)){\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tif($value === \'\')\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Skipping fields names with strings from (array)skip_fields_with_strings\\r\\n\\t\\t\\t\\tforeach($skip_fields_with_strings as $needle){\\r\\n\\t\\t\\t\\t\\tif (strpos($prev_name.$key, $needle) !== false){\\r\\n\\t\\t\\t\\t\\t\\tcontinue(2);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}unset($needle);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Obfuscating params\\r\\n\\t\\t\\t\\tforeach($obfuscate_params as $needle){\\r\\n\\t\\t\\t\\t\\tif (strpos($key, $needle) !== false){\\r\\n\\t\\t\\t\\t\\t\\t$value = obfuscate_param($value);\\r\\n\\t\\t\\t\\t\\t\\tcontinue(2);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}unset($needle);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Email\\r\\n\\t\\t\\t\\tif (!$email && preg_match(\\"\\/^\\\\S+@\\\\S+\\\\.\\\\S+$\\/\\", $value)){\\r\\n\\t\\t\\t\\t\\t$email = $value;\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Names\\r\\n\\t\\t\\t\\t}elseif (preg_match(\\"\\/name\\/i\\", $key)){\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\tif(preg_match(\\"\\/first\\/i\\", $key) || preg_match(\\"\\/fore\\/i\\", $key) || preg_match(\\"\\/private\\/i\\", $key))\\r\\n\\t\\t\\t\\t\\t\\t$nickname[\'first\'] = $value;\\r\\n\\t\\t\\t\\t\\telseif(preg_match(\\"\\/last\\/i\\", $key) || preg_match(\\"\\/sur\\/i\\", $key) || preg_match(\\"\\/family\\/i\\", $key) || preg_match(\\"\\/second\\/i\\", $key))\\r\\n\\t\\t\\t\\t\\t\\t$nickname[\'last\'] = $value;\\r\\n\\t\\t\\t\\t\\telseif(!$nickname[\'nick\'])\\r\\n\\t\\t\\t\\t\\t\\t$nickname[\'nick\'] = $value;\\r\\n\\t\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t\\t\\t$message[$prev_name.$key] = $value;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Subject\\r\\n\\t\\t\\t\\t}elseif ($subject === null && preg_match(\\"\\/subj\\/i\\", $key)){\\r\\n\\t\\t\\t\\t\\t$subject = $value;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Message\\r\\n\\t\\t\\t\\t}else{\\r\\n\\t\\t\\t\\t\\t$message[$prev_name.$key] = $value;\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t}else if(!is_object($value)&&@get_class($value)!=\'WP_User\'){\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t$prev_name_original = $prev_name;\\r\\n\\t\\t\\t\\t$prev_name = ($prev_name === \'\' ? $key.\'_\' : $prev_name.$key.\'_\');\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t$temp = $this->getFieldsAny($value, $message, $email, $nickname, $subject, $contact, $prev_name);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t$message \\t= $temp[\'message\'];\\r\\n\\t\\t\\t\\t$email \\t\\t= ($temp[\'email\'] \\t\\t? $temp[\'email\'] : null);\\r\\n\\t\\t\\t\\t$nickname \\t= ($temp[\'nickname\'] \\t? $temp[\'nickname\'] : null);\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t$subject \\t= ($temp[\'subject\'] \\t? $temp[\'subject\'] : null);\\r\\n\\t\\t\\t\\tif($contact === true)\\r\\n\\t\\t\\t\\t\\t$contact = ($temp[\'contact\'] === false ? false : true);\\r\\n\\t\\t\\t\\t$prev_name \\t= $prev_name_original;\\r\\n\\t\\t\\t}\\r\\n\\t\\t} unset($key, $value);\\r\\n\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\/\\/If top iteration, returns compiled name field. Example: \\"Nickname Firtsname Lastname\\".\\r\\n\\tif($prev_name === \'\'){\\r\\n\\t\\tif(!empty($nickname)){\\r\\n\\t\\t\\t$nickname_str = \'\';\\r\\n\\t\\t\\tforeach($nickname as $value){\\r\\n\\t\\t\\t\\t$nickname_str .= ($value ? $value.\\" \\" : \\"\\");\\r\\n\\t\\t\\t}unset($value);\\r\\n\\t\\t}\\r\\n\\t\\t$nickname = $nickname_str;\\r\\n\\t}\\r\\n\\t\\r\\n\\t$return_param = array(\\r\\n\\t\\t\'email\' \\t=> $email,\\r\\n\\t\\t\'nickname\' \\t=> $nickname,\\r\\n\\t\\t\'subject\' \\t=> $subject,\\r\\n\\t\\t\'contact\' \\t=> $contact,\\r\\n\\t\\t\'message\' \\t=> $message\\r\\n\\t);\\t\\r\\n\\treturn $return_param;\\r\\n}\\r\\n\\/**\\r\\n* Masks a value with asterisks (*) Needed by the getFieldsAny()\\r\\n* @return string\\r\\n*\\/\\r\\nfunction obfuscate_param($value = null) {\\r\\n\\tif ($value && (!is_object($value) || !is_array($value))) {\\r\\n\\t\\t$length = strlen($value);\\r\\n\\t\\t$value = str_repeat(\'*\', $length);\\r\\n\\t}\\r\\n\\r\\n\\treturn $value;\\r\\n}","locked":0,"properties":null,"disabled":0,"moduleguid":"","static":0,"static_file":"","content":"$e = $modx->Event;\\r\\nif ($e->name == \'OnLoadWebDocument\')\\r\\n{\\r\\n\\t$plugin_enabled = $modx->getOption(\'antispambycleantalk.plugin_enabled\');\\r\\n\\tif ($plugin_enabled)\\r\\n\\t{\\r\\n\\t\\t$ct_temp_msg_data = getFieldsAny($_POST);\\r\\n\\t\\tif (isset($ct_temp_msg_data[\'email\']) && (isset($ct_temp_msg_data[\'nickname\']) || isset($ct_temp_msg_data[\'message\'])))\\r\\n\\t\\t{\\r\\n\\t\\t\\t$api_key = $modx->getOption(\'antispambycleantalk.api_key\');\\r\\n\\t\\t\\t$sender_email    = ($ct_temp_msg_data[\'email\']    ? $ct_temp_msg_data[\'email\']    : \'\');\\r\\n\\t\\t\\t$sender_nickname = ($ct_temp_msg_data[\'nickname\'] ? $ct_temp_msg_data[\'nickname\'] : \'\');\\r\\n\\t\\t\\t$sender_message_post  = ($ct_temp_msg_data[\'message\']  ? $ct_temp_msg_data[\'message\']  : array());\\r\\n\\t\\t\\t$sender_message == null;\\r\\n\\t\\t\\tforeach ($sender_message_post as $key=>$value)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tif ($key == \'message\'   ||\\r\\n\\t\\t\\t\\t\\t$key == \'contact\'   ||\\r\\n\\t\\t\\t\\t\\t$key == \'msg\'       ||\\r\\n\\t\\t\\t\\t\\t$key == \'contactus\' ||\\r\\n\\t\\t\\t\\t\\t$key == \'contact_us\'\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t\\t$sender_message = $value;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t$check_type = null;\\r\\n\\t\\t\\tif ($sender_message !== null)\\r\\n\\t\\t\\t    $check_type = \'check_message\';\\r\\n\\t\\t\\telse $check_type = \'check_newuser\';\\r\\n\\t\\t\\t$path = $modx->getOption(\'antispambycleantalk.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/antispambycleantalk\\/model\\/\');\\r\\n\\t\\t\\tif (is_readable($path . \'cleantalk.class.php\') && is_readable($path . \'cleantalkhelper.class.php\') && is_readable($path . \'cleantalkrequest.class.php\') && is_readable($path . \'cleantalkresponse.class.php\')) {\\r\\n\\t\\t\\t    $cleantalk = $modx->getService(\'antispambycleantalk\',\'Cleantalk\', $path);\\r\\n\\t\\t\\t    $cleantalk_request = $modx->getService(\'antispambycleantalk\',\'CleantalkRequest\', $path);\\r\\n\\t\\t\\t    $cleantalk_response = $modx->getService(\'antispambycleantalk\',\'CleantalkResponse\',$path);\\r\\n\\t\\t\\t    $cleantalk_helper = $modx->getService(\'antispambycleantalk\',\'CleantalkHelper\',$path);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t\\/* Content check *\\/\\r\\n\\t\\t\\t$refferrer = null;\\r\\n\\t\\t\\tif (isset($_SERVER[\'HTTP_REFERER\'])) {\\r\\n\\t\\t\\t    $refferrer = htmlspecialchars((string) $_SERVER[\'HTTP_REFERER\']);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t$user_agent = null;\\r\\n\\t\\t\\tif (isset($_SERVER[\'HTTP_USER_AGENT\'])) {\\r\\n\\t\\t\\t    $user_agent = htmlspecialchars((string) $_SERVER[\'HTTP_USER_AGENT\']);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t$sender_info = array(\\r\\n\\t\\t\\t    \'REFFERRER\' => $refferrer,\\r\\n\\t\\t\\t    \'post_url\' => $refferrer,\\r\\n\\t\\t\\t    \'USER_AGENT\' => $user_agent\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t$js_on = 0;\\r\\n\\t\\t\\tif (isset($_POST[\'ct_checkjs\']) && $_POST[\'ct_checkjs\'] == date(\\"Y\\"))\\r\\n\\t\\t\\t        $js_on = 1;\\r\\n\\t\\t\\t$cookie_timestamp = (isset($_COOKIE[\'ct_timestamp\']) ? $_COOKIE[\'ct_timestamp\'] : 0);\\r\\n\\t\\t\\t$sender_info = json_encode($sender_info);   \\r\\n\\t\\t\\t$cleantalk_request->auth_key = trim($api_key);\\r\\n\\t\\t\\t$cleantalk_request->sender_email = $sender_email;\\r\\n\\t\\t\\t$cleantalk_request->sender_nickname = $sender_nickname;\\r\\n\\t\\t\\t$cleantalk_request->sender_ip = $cleantalk->cleantalk_get_real_ip();\\r\\n\\t\\t\\t$cleantalk_request->agent = \'modx-10\';\\r\\n\\t\\t\\t$cleantalk_request->js_on = $js_on;\\r\\n\\t\\t\\t$cleantalk_request->submit_time = time() - $cookie_timestamp;\\r\\n\\t\\t\\t$cleantalk_request->sender_info = $sender_info;\\r\\n\\t\\t\\t$cleantalk->work_url = \'http:\\/\\/moderate.cleantalk.org\';\\r\\n\\t\\t\\t$cleantalk->server_url = \'http:\\/\\/moderate.cleantalk.org\';\\r\\n\\t\\t\\tif ($check_type == \'check_message\'){\\r\\n\\t\\t\\t    $cleantalk_request->message = $sender_message;\\r\\n\\t\\t\\t    $ct_result = $cleantalk->isAllowMessage($cleantalk_request);   \\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse $ct_result = $cleantalk->isAllowUser($cleantalk_request); \\r\\n\\t\\t\\tif($ct_result->errno == 0 && $ct_result->allow == 0)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t  \\t$error_tpl=file_get_contents($path.\\"\\/error.html\\");\\r\\n\\t\\t\\t\\tprint str_replace(\'%ERROR_TEXT%\',$ct_result->comment,$error_tpl);\\t\\t\\t   \\t\\r\\n\\t\\t\\t\\tdie();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\/*\\r\\n* Get data from submit recursively\\r\\n*\\/\\r\\n\\r\\nfunction getFieldsAny($arr, $message=array(), $email = null, $nickname = array(\'nick\' => \'\', \'first\' => \'\', \'last\' => \'\'), $subject = null, $contact = true, $prev_name = \'\'){\\r\\n\\t\\r\\n\\t$obfuscate_params = array( \\/\\/Fields to replace with ****\\r\\n\\t\\t\'password\',\\r\\n\\t\\t\'pass\',\\r\\n\\t\\t\'pwd\',\\r\\n\\t\\t\'pswd\'\\r\\n\\t);\\r\\n\\t\\r\\n\\t$skip_fields_with_strings = array( \\/\\/Array for strings in keys to skip and known service fields\\r\\n\\t\\t\\/\\/ Common\\r\\n\\t\\t\'ct_checkjs\', \\/\\/Do not send ct_checkjs\\r\\n\\t\\t\'nonce\', \\/\\/nonce for strings such as \'rsvp_nonce_name\'\\r\\n\\t\\t\'security\',\\r\\n\\t\\t\'action\',\\r\\n\\t\\t\'http_referer\',\\r\\n\\t\\t\'timestamp\',\\r\\n\\t\\t\'captcha\',\\r\\n\\t\\t\\/\\/ Formidable Form\\r\\n\\t\\t\'form_key\',\\r\\n\\t\\t\'submit_entry\',\\r\\n\\t\\t\\/\\/ Custom Contact Forms\\r\\n\\t\\t\'form_id\',\\r\\n\\t\\t\'ccf_form\',\\r\\n\\t\\t\'form_page\',\\r\\n\\t\\t\\/\\/ Qu Forms\\r\\n\\t\\t\'iphorm_uid\',\\r\\n\\t\\t\'form_url\',\\r\\n\\t\\t\'post_id\',\\r\\n\\t\\t\'iphorm_ajax\',\\r\\n\\t\\t\'iphorm_id\',\\r\\n\\t\\t\\/\\/ Fast SecureContact Froms\\r\\n\\t\\t\'fs_postonce_1\',\\r\\n\\t\\t\'fscf_submitted\',\\r\\n\\t\\t\'mailto_id\',\\r\\n\\t\\t\'si_contact_action\',\\r\\n\\t\\t\\/\\/ Ninja Forms\\r\\n\\t\\t\'formData_id\',\\r\\n\\t\\t\'formData_settings\',\\r\\n\\t\\t\'formData_fields_\\\\d+_id\',\\r\\n\\t\\t\\/\\/ E_signature\\r\\n\\t\\t\'recipient_signature\',\\r\\n\\t\\t\'output_\\\\d+_\\\\w{0,2}\',\\r\\n\\t\\t\\/\\/ Contact Form by Web-Settler protection\\r\\n        \'_formId\',\\r\\n        \'_returnLink\',\\r\\n\\t\\t\\/\\/ Social login and more\\r\\n\\t\\t\'_save\',\\r\\n\\t\\t\'_facebook\',\\r\\n\\t\\t\'_social\',\\r\\n\\t\\t\'user_login-\',\\r\\n\\t);\\r\\n\\tif(count($arr)){\\r\\n\\t\\tforeach($arr as $key => $value){\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif(gettype($value)==\'string\'){\\r\\n\\t\\t\\t\\t$decoded_json_value = json_decode($value, true);\\r\\n\\t\\t\\t\\tif($decoded_json_value !== null)\\r\\n\\t\\t\\t\\t\\t$value = $decoded_json_value;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif(!is_array($value) && !is_object($value)){\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tif($value === \'\')\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Skipping fields names with strings from (array)skip_fields_with_strings\\r\\n\\t\\t\\t\\tforeach($skip_fields_with_strings as $needle){\\r\\n\\t\\t\\t\\t\\tif (strpos($prev_name.$key, $needle) !== false){\\r\\n\\t\\t\\t\\t\\t\\tcontinue(2);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}unset($needle);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Obfuscating params\\r\\n\\t\\t\\t\\tforeach($obfuscate_params as $needle){\\r\\n\\t\\t\\t\\t\\tif (strpos($key, $needle) !== false){\\r\\n\\t\\t\\t\\t\\t\\t$value = obfuscate_param($value);\\r\\n\\t\\t\\t\\t\\t\\tcontinue(2);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}unset($needle);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Email\\r\\n\\t\\t\\t\\tif (!$email && preg_match(\\"\\/^\\\\S+@\\\\S+\\\\.\\\\S+$\\/\\", $value)){\\r\\n\\t\\t\\t\\t\\t$email = $value;\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Names\\r\\n\\t\\t\\t\\t}elseif (preg_match(\\"\\/name\\/i\\", $key)){\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\tif(preg_match(\\"\\/first\\/i\\", $key) || preg_match(\\"\\/fore\\/i\\", $key) || preg_match(\\"\\/private\\/i\\", $key))\\r\\n\\t\\t\\t\\t\\t\\t$nickname[\'first\'] = $value;\\r\\n\\t\\t\\t\\t\\telseif(preg_match(\\"\\/last\\/i\\", $key) || preg_match(\\"\\/sur\\/i\\", $key) || preg_match(\\"\\/family\\/i\\", $key) || preg_match(\\"\\/second\\/i\\", $key))\\r\\n\\t\\t\\t\\t\\t\\t$nickname[\'last\'] = $value;\\r\\n\\t\\t\\t\\t\\telseif(!$nickname[\'nick\'])\\r\\n\\t\\t\\t\\t\\t\\t$nickname[\'nick\'] = $value;\\r\\n\\t\\t\\t\\t\\telse\\r\\n\\t\\t\\t\\t\\t\\t$message[$prev_name.$key] = $value;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Subject\\r\\n\\t\\t\\t\\t}elseif ($subject === null && preg_match(\\"\\/subj\\/i\\", $key)){\\r\\n\\t\\t\\t\\t\\t$subject = $value;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\/\\/Message\\r\\n\\t\\t\\t\\t}else{\\r\\n\\t\\t\\t\\t\\t$message[$prev_name.$key] = $value;\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t}else if(!is_object($value)&&@get_class($value)!=\'WP_User\'){\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t$prev_name_original = $prev_name;\\r\\n\\t\\t\\t\\t$prev_name = ($prev_name === \'\' ? $key.\'_\' : $prev_name.$key.\'_\');\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t$temp = $this->getFieldsAny($value, $message, $email, $nickname, $subject, $contact, $prev_name);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t$message \\t= $temp[\'message\'];\\r\\n\\t\\t\\t\\t$email \\t\\t= ($temp[\'email\'] \\t\\t? $temp[\'email\'] : null);\\r\\n\\t\\t\\t\\t$nickname \\t= ($temp[\'nickname\'] \\t? $temp[\'nickname\'] : null);\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t$subject \\t= ($temp[\'subject\'] \\t? $temp[\'subject\'] : null);\\r\\n\\t\\t\\t\\tif($contact === true)\\r\\n\\t\\t\\t\\t\\t$contact = ($temp[\'contact\'] === false ? false : true);\\r\\n\\t\\t\\t\\t$prev_name \\t= $prev_name_original;\\r\\n\\t\\t\\t}\\r\\n\\t\\t} unset($key, $value);\\r\\n\\t}\\r\\n\\t\\t\\t\\r\\n\\t\\/\\/If top iteration, returns compiled name field. Example: \\"Nickname Firtsname Lastname\\".\\r\\n\\tif($prev_name === \'\'){\\r\\n\\t\\tif(!empty($nickname)){\\r\\n\\t\\t\\t$nickname_str = \'\';\\r\\n\\t\\t\\tforeach($nickname as $value){\\r\\n\\t\\t\\t\\t$nickname_str .= ($value ? $value.\\" \\" : \\"\\");\\r\\n\\t\\t\\t}unset($value);\\r\\n\\t\\t}\\r\\n\\t\\t$nickname = $nickname_str;\\r\\n\\t}\\r\\n\\t\\r\\n\\t$return_param = array(\\r\\n\\t\\t\'email\' \\t=> $email,\\r\\n\\t\\t\'nickname\' \\t=> $nickname,\\r\\n\\t\\t\'subject\' \\t=> $subject,\\r\\n\\t\\t\'contact\' \\t=> $contact,\\r\\n\\t\\t\'message\' \\t=> $message\\r\\n\\t);\\t\\r\\n\\treturn $return_param;\\r\\n}\\r\\n\\/**\\r\\n* Masks a value with asterisks (*) Needed by the getFieldsAny()\\r\\n* @return string\\r\\n*\\/\\r\\nfunction obfuscate_param($value = null) {\\r\\n\\tif ($value && (!is_object($value) || !is_array($value))) {\\r\\n\\t\\t$length = strlen($value);\\r\\n\\t\\t$value = str_repeat(\'*\', $length);\\r\\n\\t}\\r\\n\\r\\n\\treturn $value;\\r\\n}"}',
);