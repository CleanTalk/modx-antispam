<?php return array (
  'unique_key' => 'name',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'PluginEvents' => 
    array (
      '0cba27190637900af5dab1fad6ef7cac' => 
      array (
        'preserve_keys' => true,
        'update_object' => true,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnLoadWebDocument","priority":0,"propertyset":0}',
        'guid' => '757ba426da16da769b74b82d3f71528e',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnLoadWebDocument',
        ),
        'signature' => '9b3ebb89b54f09b7ac39e04dbd14ca53',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => true,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'antispambycleantalk',
  'resolve' => NULL,
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '2e9baa37cd49c6b6d3cbe15bd7ab7bf8',
  'package' => 'modx',
  'class' => 'modPlugin',
  'signature' => '6024b1a23fbf4468c3f8a998f80ced94',
  'native_key' => 1,
  'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"cleantalkCheck","description":"Calls the Cleantalk API to check content for spam. Requires Cleantalk API key.","editor_type":0,"category":0,"cache_type":0,"plugincode":"$e = $modx->Event;\\nif ($e->name == \'OnLoadWebDocument\')\\n{\\n\\t$plugin_enabled = $modx->getOption(\'antispambycleantalk.plugin_enabled\');\\n\\tif ($plugin_enabled)\\n\\t{\\n\\t\\t$ct_temp_msg_data = getFieldsAny($_POST);\\n\\t\\tif (isset($ct_temp_msg_data[\'email\']) && (isset($ct_temp_msg_data[\'nickname\']) || isset($ct_temp_msg_data[\'message\'])))\\n\\t\\t{\\n\\t\\t\\t$api_key = $modx->getOption(\'antispambycleantalk.api_key\');\\n\\t\\t\\t$sender_email    = ($ct_temp_msg_data[\'email\']    ? $ct_temp_msg_data[\'email\']    : \'\');\\n\\t\\t\\t$sender_nickname = ($ct_temp_msg_data[\'nickname\'] ? $ct_temp_msg_data[\'nickname\'] : \'\');\\n\\t\\t\\t$sender_message_post  = ($ct_temp_msg_data[\'message\']  ? $ct_temp_msg_data[\'message\']  : array());\\n\\t\\t\\t$sender_message == null;\\n\\t\\t\\tforeach ($sender_message_post as $key=>$value)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif ($key == \'message\'   ||\\n\\t\\t\\t\\t\\t$key == \'contact\'   ||\\n\\t\\t\\t\\t\\t$key == \'msg\'       ||\\n\\t\\t\\t\\t\\t$key == \'contactus\' ||\\n\\t\\t\\t\\t\\t$key == \'contact_us\'\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t$sender_message = $value;\\n\\t\\t\\t}\\n\\t\\t\\t$check_type = null;\\n\\t\\t\\tif ($sender_message !== null)\\n\\t\\t\\t    $check_type = \'check_message\';\\n\\t\\t\\telse $check_type = \'check_newuser\';\\n\\t\\t\\t$path = $modx->getOption(\'antispambycleantalk.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/antispambycleantalk\\/model\\/\');\\n\\t\\t\\tif (is_readable($path . \'cleantalk.class.php\') && is_readable($path . \'cleantalkhelper.class.php\') && is_readable($path . \'cleantalkrequest.class.php\') && is_readable($path . \'cleantalkresponse.class.php\')) {\\n\\t\\t\\t    $cleantalk = $modx->getService(\'antispambycleantalk\',\'Cleantalk\', $path);\\n\\t\\t\\t    $cleantalk_request = $modx->getService(\'antispambycleantalk\',\'CleantalkRequest\', $path);\\n\\t\\t\\t    $cleantalk_response = $modx->getService(\'antispambycleantalk\',\'CleantalkResponse\',$path);\\n\\t\\t\\t    $cleantalk_helper = $modx->getService(\'antispambycleantalk\',\'CleantalkHelper\',$path);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\/* Content check *\\/\\n\\t\\t\\t$refferrer = null;\\n\\t\\t\\tif (isset($_SERVER[\'HTTP_REFERER\'])) {\\n\\t\\t\\t    $refferrer = htmlspecialchars((string) $_SERVER[\'HTTP_REFERER\']);\\n\\t\\t\\t}\\n\\n\\t\\t\\t$user_agent = null;\\n\\t\\t\\tif (isset($_SERVER[\'HTTP_USER_AGENT\'])) {\\n\\t\\t\\t    $user_agent = htmlspecialchars((string) $_SERVER[\'HTTP_USER_AGENT\']);\\n\\t\\t\\t}\\n\\t\\t\\t$sender_info = array(\\n\\t\\t\\t    \'REFFERRER\' => $refferrer,\\n\\t\\t\\t    \'post_url\' => $refferrer,\\n\\t\\t\\t    \'USER_AGENT\' => $user_agent\\n\\t\\t\\t);\\n\\t\\t\\t$js_on = 0;\\n\\t\\t\\tif (isset($_POST[\'ct_checkjs\']) && $_POST[\'ct_checkjs\'] == date(\\"Y\\"))\\n\\t\\t\\t        $js_on = 1;\\n\\t\\t\\t$cookie_timestamp = (isset($_COOKIE[\'ct_timestamp\']) ? $_COOKIE[\'ct_timestamp\'] : 0);\\n\\t\\t\\t$sender_info = json_encode($sender_info);   \\n\\t\\t\\t$cleantalk_request->auth_key = trim($api_key);\\n\\t\\t\\t$cleantalk_request->sender_email = $sender_email;\\n\\t\\t\\t$cleantalk_request->sender_nickname = $sender_nickname;\\n\\t\\t\\t$cleantalk_request->sender_ip = $cleantalk->cleantalk_get_real_ip();\\n\\t\\t\\t$cleantalk_request->agent = \'modx-10\';\\n\\t\\t\\t$cleantalk_request->js_on = $js_on;\\n\\t\\t\\t$cleantalk_request->submit_time = time() - $cookie_timestamp;\\n\\t\\t\\t$cleantalk_request->sender_info = $sender_info;\\n\\t\\t\\t$cleantalk->work_url = \'http:\\/\\/moderate.cleantalk.org\';\\n\\t\\t\\t$cleantalk->server_url = \'http:\\/\\/moderate.cleantalk.org\';\\n\\t\\t\\tif ($check_type == \'check_message\'){\\n\\t\\t\\t    $cleantalk_request->message = $sender_message;\\n\\t\\t\\t    $ct_result = $cleantalk->isAllowMessage($cleantalk_request);   \\n\\t\\t\\t}\\n\\t\\t\\telse $ct_result = $cleantalk->isAllowUser($cleantalk_request); \\n\\t\\t\\tif($ct_result->errno == 0 && $ct_result->allow == 0)\\n\\t\\t\\t{\\n\\t\\t\\t  \\t$error_tpl=file_get_contents($path.\\"\\/error.html\\");\\n\\t\\t\\t\\tprint str_replace(\'%ERROR_TEXT%\',$ct_result->comment,$error_tpl);\\t\\t\\t   \\t\\n\\t\\t\\t\\tdie();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\\n\\n\\n\\/*\\n* Get data from submit recursively\\n*\\/\\n\\nfunction getFieldsAny($arr, $message=array(), $email = null, $nickname = array(\'nick\' => \'\', \'first\' => \'\', \'last\' => \'\'), $subject = null, $contact = true, $prev_name = \'\'){\\n\\t\\n\\t$obfuscate_params = array( \\/\\/Fields to replace with ****\\n\\t\\t\'password\',\\n\\t\\t\'pass\',\\n\\t\\t\'pwd\',\\n\\t\\t\'pswd\'\\n\\t);\\n\\t\\n\\t$skip_fields_with_strings = array( \\/\\/Array for strings in keys to skip and known service fields\\n\\t\\t\\/\\/ Common\\n\\t\\t\'ct_checkjs\', \\/\\/Do not send ct_checkjs\\n\\t\\t\'nonce\', \\/\\/nonce for strings such as \'rsvp_nonce_name\'\\n\\t\\t\'security\',\\n\\t\\t\'action\',\\n\\t\\t\'http_referer\',\\n\\t\\t\'timestamp\',\\n\\t\\t\'captcha\',\\n\\t\\t\\/\\/ Formidable Form\\n\\t\\t\'form_key\',\\n\\t\\t\'submit_entry\',\\n\\t\\t\\/\\/ Custom Contact Forms\\n\\t\\t\'form_id\',\\n\\t\\t\'ccf_form\',\\n\\t\\t\'form_page\',\\n\\t\\t\\/\\/ Qu Forms\\n\\t\\t\'iphorm_uid\',\\n\\t\\t\'form_url\',\\n\\t\\t\'post_id\',\\n\\t\\t\'iphorm_ajax\',\\n\\t\\t\'iphorm_id\',\\n\\t\\t\\/\\/ Fast SecureContact Froms\\n\\t\\t\'fs_postonce_1\',\\n\\t\\t\'fscf_submitted\',\\n\\t\\t\'mailto_id\',\\n\\t\\t\'si_contact_action\',\\n\\t\\t\\/\\/ Ninja Forms\\n\\t\\t\'formData_id\',\\n\\t\\t\'formData_settings\',\\n\\t\\t\'formData_fields_\\\\d+_id\',\\n\\t\\t\\/\\/ E_signature\\n\\t\\t\'recipient_signature\',\\n\\t\\t\'output_\\\\d+_\\\\w{0,2}\',\\n\\t\\t\\/\\/ Contact Form by Web-Settler protection\\n        \'_formId\',\\n        \'_returnLink\',\\n\\t\\t\\/\\/ Social login and more\\n\\t\\t\'_save\',\\n\\t\\t\'_facebook\',\\n\\t\\t\'_social\',\\n\\t\\t\'user_login-\',\\n\\t);\\n\\tif(count($arr)){\\n\\t\\tforeach($arr as $key => $value){\\n\\t\\t\\t\\n\\t\\t\\tif(gettype($value)==\'string\'){\\n\\t\\t\\t\\t$decoded_json_value = json_decode($value, true);\\n\\t\\t\\t\\tif($decoded_json_value !== null)\\n\\t\\t\\t\\t\\t$value = $decoded_json_value;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif(!is_array($value) && !is_object($value)){\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif($value === \'\')\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Skipping fields names with strings from (array)skip_fields_with_strings\\n\\t\\t\\t\\tforeach($skip_fields_with_strings as $needle){\\n\\t\\t\\t\\t\\tif (strpos($prev_name.$key, $needle) !== false){\\n\\t\\t\\t\\t\\t\\tcontinue(2);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}unset($needle);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Obfuscating params\\n\\t\\t\\t\\tforeach($obfuscate_params as $needle){\\n\\t\\t\\t\\t\\tif (strpos($key, $needle) !== false){\\n\\t\\t\\t\\t\\t\\t$value = obfuscate_param($value);\\n\\t\\t\\t\\t\\t\\tcontinue(2);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}unset($needle);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Email\\n\\t\\t\\t\\tif (!$email && preg_match(\\"\\/^\\\\S+@\\\\S+\\\\.\\\\S+$\\/\\", $value)){\\n\\t\\t\\t\\t\\t$email = $value;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Names\\n\\t\\t\\t\\t}elseif (preg_match(\\"\\/name\\/i\\", $key)){\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tif(preg_match(\\"\\/first\\/i\\", $key) || preg_match(\\"\\/fore\\/i\\", $key) || preg_match(\\"\\/private\\/i\\", $key))\\n\\t\\t\\t\\t\\t\\t$nickname[\'first\'] = $value;\\n\\t\\t\\t\\t\\telseif(preg_match(\\"\\/last\\/i\\", $key) || preg_match(\\"\\/sur\\/i\\", $key) || preg_match(\\"\\/family\\/i\\", $key) || preg_match(\\"\\/second\\/i\\", $key))\\n\\t\\t\\t\\t\\t\\t$nickname[\'last\'] = $value;\\n\\t\\t\\t\\t\\telseif(!$nickname[\'nick\'])\\n\\t\\t\\t\\t\\t\\t$nickname[\'nick\'] = $value;\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t$message[$prev_name.$key] = $value;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Subject\\n\\t\\t\\t\\t}elseif ($subject === null && preg_match(\\"\\/subj\\/i\\", $key)){\\n\\t\\t\\t\\t\\t$subject = $value;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Message\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t$message[$prev_name.$key] = $value;\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t}else if(!is_object($value)&&@get_class($value)!=\'WP_User\'){\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t$prev_name_original = $prev_name;\\n\\t\\t\\t\\t$prev_name = ($prev_name === \'\' ? $key.\'_\' : $prev_name.$key.\'_\');\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t$temp = $this->getFieldsAny($value, $message, $email, $nickname, $subject, $contact, $prev_name);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t$message \\t= $temp[\'message\'];\\n\\t\\t\\t\\t$email \\t\\t= ($temp[\'email\'] \\t\\t? $temp[\'email\'] : null);\\n\\t\\t\\t\\t$nickname \\t= ($temp[\'nickname\'] \\t? $temp[\'nickname\'] : null);\\t\\t\\t\\t\\n\\t\\t\\t\\t$subject \\t= ($temp[\'subject\'] \\t? $temp[\'subject\'] : null);\\n\\t\\t\\t\\tif($contact === true)\\n\\t\\t\\t\\t\\t$contact = ($temp[\'contact\'] === false ? false : true);\\n\\t\\t\\t\\t$prev_name \\t= $prev_name_original;\\n\\t\\t\\t}\\n\\t\\t} unset($key, $value);\\n\\t}\\n\\t\\t\\t\\n\\t\\/\\/If top iteration, returns compiled name field. Example: \\"Nickname Firtsname Lastname\\".\\n\\tif($prev_name === \'\'){\\n\\t\\tif(!empty($nickname)){\\n\\t\\t\\t$nickname_str = \'\';\\n\\t\\t\\tforeach($nickname as $value){\\n\\t\\t\\t\\t$nickname_str .= ($value ? $value.\\" \\" : \\"\\");\\n\\t\\t\\t}unset($value);\\n\\t\\t}\\n\\t\\t$nickname = $nickname_str;\\n\\t}\\n\\t\\n\\t$return_param = array(\\n\\t\\t\'email\' \\t=> $email,\\n\\t\\t\'nickname\' \\t=> $nickname,\\n\\t\\t\'subject\' \\t=> $subject,\\n\\t\\t\'contact\' \\t=> $contact,\\n\\t\\t\'message\' \\t=> $message\\n\\t);\\t\\n\\treturn $return_param;\\n}\\n\\/**\\n* Masks a value with asterisks (*) Needed by the getFieldsAny()\\n* @return string\\n*\\/\\nfunction obfuscate_param($value = null) {\\n\\tif ($value && (!is_object($value) || !is_array($value))) {\\n\\t\\t$length = strlen($value);\\n\\t\\t$value = str_repeat(\'*\', $length);\\n\\t}\\n\\n\\treturn $value;\\n}","locked":0,"properties":null,"disabled":0,"moduleguid":"","static":0,"static_file":"","content":"$e = $modx->Event;\\nif ($e->name == \'OnLoadWebDocument\')\\n{\\n\\t$plugin_enabled = $modx->getOption(\'antispambycleantalk.plugin_enabled\');\\n\\tif ($plugin_enabled)\\n\\t{\\n\\t\\t$ct_temp_msg_data = getFieldsAny($_POST);\\n\\t\\tif (isset($ct_temp_msg_data[\'email\']) && (isset($ct_temp_msg_data[\'nickname\']) || isset($ct_temp_msg_data[\'message\'])))\\n\\t\\t{\\n\\t\\t\\t$api_key = $modx->getOption(\'antispambycleantalk.api_key\');\\n\\t\\t\\t$sender_email    = ($ct_temp_msg_data[\'email\']    ? $ct_temp_msg_data[\'email\']    : \'\');\\n\\t\\t\\t$sender_nickname = ($ct_temp_msg_data[\'nickname\'] ? $ct_temp_msg_data[\'nickname\'] : \'\');\\n\\t\\t\\t$sender_message_post  = ($ct_temp_msg_data[\'message\']  ? $ct_temp_msg_data[\'message\']  : array());\\n\\t\\t\\t$sender_message == null;\\n\\t\\t\\tforeach ($sender_message_post as $key=>$value)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif ($key == \'message\'   ||\\n\\t\\t\\t\\t\\t$key == \'contact\'   ||\\n\\t\\t\\t\\t\\t$key == \'msg\'       ||\\n\\t\\t\\t\\t\\t$key == \'contactus\' ||\\n\\t\\t\\t\\t\\t$key == \'contact_us\'\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t$sender_message = $value;\\n\\t\\t\\t}\\n\\t\\t\\t$check_type = null;\\n\\t\\t\\tif ($sender_message !== null)\\n\\t\\t\\t    $check_type = \'check_message\';\\n\\t\\t\\telse $check_type = \'check_newuser\';\\n\\t\\t\\t$path = $modx->getOption(\'antispambycleantalk.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/antispambycleantalk\\/model\\/\');\\n\\t\\t\\tif (is_readable($path . \'cleantalk.class.php\') && is_readable($path . \'cleantalkhelper.class.php\') && is_readable($path . \'cleantalkrequest.class.php\') && is_readable($path . \'cleantalkresponse.class.php\')) {\\n\\t\\t\\t    $cleantalk = $modx->getService(\'antispambycleantalk\',\'Cleantalk\', $path);\\n\\t\\t\\t    $cleantalk_request = $modx->getService(\'antispambycleantalk\',\'CleantalkRequest\', $path);\\n\\t\\t\\t    $cleantalk_response = $modx->getService(\'antispambycleantalk\',\'CleantalkResponse\',$path);\\n\\t\\t\\t    $cleantalk_helper = $modx->getService(\'antispambycleantalk\',\'CleantalkHelper\',$path);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\/* Content check *\\/\\n\\t\\t\\t$refferrer = null;\\n\\t\\t\\tif (isset($_SERVER[\'HTTP_REFERER\'])) {\\n\\t\\t\\t    $refferrer = htmlspecialchars((string) $_SERVER[\'HTTP_REFERER\']);\\n\\t\\t\\t}\\n\\n\\t\\t\\t$user_agent = null;\\n\\t\\t\\tif (isset($_SERVER[\'HTTP_USER_AGENT\'])) {\\n\\t\\t\\t    $user_agent = htmlspecialchars((string) $_SERVER[\'HTTP_USER_AGENT\']);\\n\\t\\t\\t}\\n\\t\\t\\t$sender_info = array(\\n\\t\\t\\t    \'REFFERRER\' => $refferrer,\\n\\t\\t\\t    \'post_url\' => $refferrer,\\n\\t\\t\\t    \'USER_AGENT\' => $user_agent\\n\\t\\t\\t);\\n\\t\\t\\t$js_on = 0;\\n\\t\\t\\tif (isset($_POST[\'ct_checkjs\']) && $_POST[\'ct_checkjs\'] == date(\\"Y\\"))\\n\\t\\t\\t        $js_on = 1;\\n\\t\\t\\t$cookie_timestamp = (isset($_COOKIE[\'ct_timestamp\']) ? $_COOKIE[\'ct_timestamp\'] : 0);\\n\\t\\t\\t$sender_info = json_encode($sender_info);   \\n\\t\\t\\t$cleantalk_request->auth_key = trim($api_key);\\n\\t\\t\\t$cleantalk_request->sender_email = $sender_email;\\n\\t\\t\\t$cleantalk_request->sender_nickname = $sender_nickname;\\n\\t\\t\\t$cleantalk_request->sender_ip = $cleantalk->cleantalk_get_real_ip();\\n\\t\\t\\t$cleantalk_request->agent = \'modx-10\';\\n\\t\\t\\t$cleantalk_request->js_on = $js_on;\\n\\t\\t\\t$cleantalk_request->submit_time = time() - $cookie_timestamp;\\n\\t\\t\\t$cleantalk_request->sender_info = $sender_info;\\n\\t\\t\\t$cleantalk->work_url = \'http:\\/\\/moderate.cleantalk.org\';\\n\\t\\t\\t$cleantalk->server_url = \'http:\\/\\/moderate.cleantalk.org\';\\n\\t\\t\\tif ($check_type == \'check_message\'){\\n\\t\\t\\t    $cleantalk_request->message = $sender_message;\\n\\t\\t\\t    $ct_result = $cleantalk->isAllowMessage($cleantalk_request);   \\n\\t\\t\\t}\\n\\t\\t\\telse $ct_result = $cleantalk->isAllowUser($cleantalk_request); \\n\\t\\t\\tif($ct_result->errno == 0 && $ct_result->allow == 0)\\n\\t\\t\\t{\\n\\t\\t\\t  \\t$error_tpl=file_get_contents($path.\\"\\/error.html\\");\\n\\t\\t\\t\\tprint str_replace(\'%ERROR_TEXT%\',$ct_result->comment,$error_tpl);\\t\\t\\t   \\t\\n\\t\\t\\t\\tdie();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\\n\\n\\n\\/*\\n* Get data from submit recursively\\n*\\/\\n\\nfunction getFieldsAny($arr, $message=array(), $email = null, $nickname = array(\'nick\' => \'\', \'first\' => \'\', \'last\' => \'\'), $subject = null, $contact = true, $prev_name = \'\'){\\n\\t\\n\\t$obfuscate_params = array( \\/\\/Fields to replace with ****\\n\\t\\t\'password\',\\n\\t\\t\'pass\',\\n\\t\\t\'pwd\',\\n\\t\\t\'pswd\'\\n\\t);\\n\\t\\n\\t$skip_fields_with_strings = array( \\/\\/Array for strings in keys to skip and known service fields\\n\\t\\t\\/\\/ Common\\n\\t\\t\'ct_checkjs\', \\/\\/Do not send ct_checkjs\\n\\t\\t\'nonce\', \\/\\/nonce for strings such as \'rsvp_nonce_name\'\\n\\t\\t\'security\',\\n\\t\\t\'action\',\\n\\t\\t\'http_referer\',\\n\\t\\t\'timestamp\',\\n\\t\\t\'captcha\',\\n\\t\\t\\/\\/ Formidable Form\\n\\t\\t\'form_key\',\\n\\t\\t\'submit_entry\',\\n\\t\\t\\/\\/ Custom Contact Forms\\n\\t\\t\'form_id\',\\n\\t\\t\'ccf_form\',\\n\\t\\t\'form_page\',\\n\\t\\t\\/\\/ Qu Forms\\n\\t\\t\'iphorm_uid\',\\n\\t\\t\'form_url\',\\n\\t\\t\'post_id\',\\n\\t\\t\'iphorm_ajax\',\\n\\t\\t\'iphorm_id\',\\n\\t\\t\\/\\/ Fast SecureContact Froms\\n\\t\\t\'fs_postonce_1\',\\n\\t\\t\'fscf_submitted\',\\n\\t\\t\'mailto_id\',\\n\\t\\t\'si_contact_action\',\\n\\t\\t\\/\\/ Ninja Forms\\n\\t\\t\'formData_id\',\\n\\t\\t\'formData_settings\',\\n\\t\\t\'formData_fields_\\\\d+_id\',\\n\\t\\t\\/\\/ E_signature\\n\\t\\t\'recipient_signature\',\\n\\t\\t\'output_\\\\d+_\\\\w{0,2}\',\\n\\t\\t\\/\\/ Contact Form by Web-Settler protection\\n        \'_formId\',\\n        \'_returnLink\',\\n\\t\\t\\/\\/ Social login and more\\n\\t\\t\'_save\',\\n\\t\\t\'_facebook\',\\n\\t\\t\'_social\',\\n\\t\\t\'user_login-\',\\n\\t);\\n\\tif(count($arr)){\\n\\t\\tforeach($arr as $key => $value){\\n\\t\\t\\t\\n\\t\\t\\tif(gettype($value)==\'string\'){\\n\\t\\t\\t\\t$decoded_json_value = json_decode($value, true);\\n\\t\\t\\t\\tif($decoded_json_value !== null)\\n\\t\\t\\t\\t\\t$value = $decoded_json_value;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tif(!is_array($value) && !is_object($value)){\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif($value === \'\')\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Skipping fields names with strings from (array)skip_fields_with_strings\\n\\t\\t\\t\\tforeach($skip_fields_with_strings as $needle){\\n\\t\\t\\t\\t\\tif (strpos($prev_name.$key, $needle) !== false){\\n\\t\\t\\t\\t\\t\\tcontinue(2);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}unset($needle);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Obfuscating params\\n\\t\\t\\t\\tforeach($obfuscate_params as $needle){\\n\\t\\t\\t\\t\\tif (strpos($key, $needle) !== false){\\n\\t\\t\\t\\t\\t\\t$value = obfuscate_param($value);\\n\\t\\t\\t\\t\\t\\tcontinue(2);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}unset($needle);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Email\\n\\t\\t\\t\\tif (!$email && preg_match(\\"\\/^\\\\S+@\\\\S+\\\\.\\\\S+$\\/\\", $value)){\\n\\t\\t\\t\\t\\t$email = $value;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Names\\n\\t\\t\\t\\t}elseif (preg_match(\\"\\/name\\/i\\", $key)){\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tif(preg_match(\\"\\/first\\/i\\", $key) || preg_match(\\"\\/fore\\/i\\", $key) || preg_match(\\"\\/private\\/i\\", $key))\\n\\t\\t\\t\\t\\t\\t$nickname[\'first\'] = $value;\\n\\t\\t\\t\\t\\telseif(preg_match(\\"\\/last\\/i\\", $key) || preg_match(\\"\\/sur\\/i\\", $key) || preg_match(\\"\\/family\\/i\\", $key) || preg_match(\\"\\/second\\/i\\", $key))\\n\\t\\t\\t\\t\\t\\t$nickname[\'last\'] = $value;\\n\\t\\t\\t\\t\\telseif(!$nickname[\'nick\'])\\n\\t\\t\\t\\t\\t\\t$nickname[\'nick\'] = $value;\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t$message[$prev_name.$key] = $value;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Subject\\n\\t\\t\\t\\t}elseif ($subject === null && preg_match(\\"\\/subj\\/i\\", $key)){\\n\\t\\t\\t\\t\\t$subject = $value;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\/\\/Message\\n\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t$message[$prev_name.$key] = $value;\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t}else if(!is_object($value)&&@get_class($value)!=\'WP_User\'){\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t$prev_name_original = $prev_name;\\n\\t\\t\\t\\t$prev_name = ($prev_name === \'\' ? $key.\'_\' : $prev_name.$key.\'_\');\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t$temp = $this->getFieldsAny($value, $message, $email, $nickname, $subject, $contact, $prev_name);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t$message \\t= $temp[\'message\'];\\n\\t\\t\\t\\t$email \\t\\t= ($temp[\'email\'] \\t\\t? $temp[\'email\'] : null);\\n\\t\\t\\t\\t$nickname \\t= ($temp[\'nickname\'] \\t? $temp[\'nickname\'] : null);\\t\\t\\t\\t\\n\\t\\t\\t\\t$subject \\t= ($temp[\'subject\'] \\t? $temp[\'subject\'] : null);\\n\\t\\t\\t\\tif($contact === true)\\n\\t\\t\\t\\t\\t$contact = ($temp[\'contact\'] === false ? false : true);\\n\\t\\t\\t\\t$prev_name \\t= $prev_name_original;\\n\\t\\t\\t}\\n\\t\\t} unset($key, $value);\\n\\t}\\n\\t\\t\\t\\n\\t\\/\\/If top iteration, returns compiled name field. Example: \\"Nickname Firtsname Lastname\\".\\n\\tif($prev_name === \'\'){\\n\\t\\tif(!empty($nickname)){\\n\\t\\t\\t$nickname_str = \'\';\\n\\t\\t\\tforeach($nickname as $value){\\n\\t\\t\\t\\t$nickname_str .= ($value ? $value.\\" \\" : \\"\\");\\n\\t\\t\\t}unset($value);\\n\\t\\t}\\n\\t\\t$nickname = $nickname_str;\\n\\t}\\n\\t\\n\\t$return_param = array(\\n\\t\\t\'email\' \\t=> $email,\\n\\t\\t\'nickname\' \\t=> $nickname,\\n\\t\\t\'subject\' \\t=> $subject,\\n\\t\\t\'contact\' \\t=> $contact,\\n\\t\\t\'message\' \\t=> $message\\n\\t);\\t\\n\\treturn $return_param;\\n}\\n\\/**\\n* Masks a value with asterisks (*) Needed by the getFieldsAny()\\n* @return string\\n*\\/\\nfunction obfuscate_param($value = null) {\\n\\tif ($value && (!is_object($value) || !is_array($value))) {\\n\\t\\t$length = strlen($value);\\n\\t\\t$value = str_repeat(\'*\', $length);\\n\\t}\\n\\n\\treturn $value;\\n}"}',
);